+ 1. Разобраться с supabase

+ 2. Создать таблицу:
    user_id - строка (первичный ключ, uuid)
    base_currency - строка (3-буквенный код основной валюты, ISO4217)
    favorites - массив строк (массив кодов валют)
    created_at - строка (дата, ISO8601) (время создания записи)
    updated_at - строка (дата, ISO8601) (время последнего обновления записи)
+ 3. Создать стратегию для бд и реализовать ее.

1. Сделать эндпоинты:
    * GET /api/currencies(cache 1 hour) - возвращает список поддерживаемых валют в формате ISO4217 (3 буквы, например USD, EUR); 
    * GET /api/rates?base=USD&targets=EUR,GBP,JPY... - возвращает рейты для конкретной валюты;
          base - базовая валюта; если параметр base не указан - он должен браться из настроек
          юзера. Если это первый запрос вообще - то базовой валютой для юзера установить
          валюту USD
          targets - массив валют через запятую (например targets=EUR,GBP,JPY)
    * GET /api/user - возвращает настройки текущего пользователя (по куке user_id);
    * POST /api/user - обновляет настройки пользователя (по куке user_id);

    currency-freaks, exchangerate-api.com, exchangeratesapi.io

    docker run -d -p 6379:6379 redis - запуск redis на порту 6379(базовый порт для redis)
    docker container stop <container_id> - остановить контейнер
    docker exec -it 474cf431d8ea redis-cli - запустить redis-cli в контейнере
    docker exec -it 474cf431d8ea redis-cli -h 127.0.0.1 -p 6379 (если контейнер запущен на другом порту)
    docker container ls - показать список контейнеров
    docker container rm <container_id> - удалить контейнер
    docker image rm <image_id> - удалить образ
    docker image ls - показать список образов
    docker build -t currency-converter .


Проверить мидлвейр и резолвятся ли зависимости например конфиг сервис.

сделать кеширование одинаковых запросов на 5 минут.

Сделать документацию

Сделать файл с версией npm

Создать образ на докере

добавить проверку на !success в ответе стороннего апи